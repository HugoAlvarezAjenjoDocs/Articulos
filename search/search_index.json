{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Esto es un rinc\u00f3n donde subo apuntes sobre temas que considero importantes, en ellos plasmo todo mi conocimiento de tal forma que quede como me hubiera gustado que me lo hubieran explicado a m\u00ed.</p> <p>Esto es un proyecto que hago para reforzar mis conocimientos, ayudar a mis compa\u00f1eros y compartir conocimiento por lo que puede estar incompleto o con faltas de ortograf\u00eda.</p> <p>Si te gustar\u00eda realizar alguna correcci\u00f3n, completar algo o incluso crear un nuevo tema de contenido te animo a hacer una pull request. Enlace al repositorio</p>"},{"location":"git/Comandos%20Basicos%20de%20Git/","title":"Trabajando con Git","text":"<p>Para iniciar un repositorio de Git (Carpeta en la que se va a aplicar el control de versiones) ejecutaremos:</p> <pre><code>git init\n</code></pre> <p>Este comando crear\u00e1 una carpeta oculta <code>.git</code> en la que se guardar\u00e1 toda la informaci\u00f3n, esta carpeta no debemos tocarla.</p> <p>Una vez inicializado el repositorio podremos ya empezar a guardar las versiones del proyecto.</p>"},{"location":"git/Comandos%20Basicos%20de%20Git/#commits","title":"Commits","text":"<p>Un \"commit\" en Git es un registro de cambios en un repositorio de c\u00f3digo. Se usa para guardar los cambios que has realizado en los archivos del proyecto, junto con un mensaje descriptivo que explica qu\u00e9 cambios se han realizado.</p> <p>Los mensajes deben de ser descriptivos. De nada sirve un mensaje que ponga <code>gfhfgh</code> a la hora de buscar un error en el c\u00f3digo.</p> <p>Para hacer un commit se pasan por dos etapas, una etapa de <code>stage</code>. En esta etapa se marcan los archivos que se quieran commitear.</p> <p>Para esto se utiliza el commando:</p> <pre><code>git add path/to/the/file.java\n</code></pre> <p>Si quieres a\u00f1adir todos los cambios, puedes hacerlo mediante el uso de <code>.</code> o <code>*</code></p> <pre><code>git add .\n</code></pre> <p>Con <code>git status</code> podremos ver que archivos estan en stage y los que no.</p> <p>Para commitear los cambios marcados en etapa stage usaremos:</p> <pre><code>git commit -m \"Mensaje del commit\"\n</code></pre> <p>Con el parametro <code>-m</code> le inicamos el mensaje, si no lo incluimos se abrir\u00e1 el editor que tengamos y ah\u00ed pondremos el mensaje.</p> <p>Para commitear todos los cambios y saltarnos la etapa de stage podremos usar el parametro <code>-a</code>:</p> <pre><code>git commit -am \"Ejemplo\"\n</code></pre> <p>Para quitar un archivo de stage simplemente ejecute:</p> <pre><code>git reset HEAD archivo/a/quitar.md\n</code></pre> <p>Si nos limitamos a poner <code>git reset HEAD</code> ser\u00e1n todos los cambios</p> <p>Esta parte de <code>git reset</code> cobrar\u00e1 sentido proximamente</p>"},{"location":"git/Comandos%20Basicos%20de%20Git/#historial-de-commits","title":"Historial de Commits","text":"<p>Si queremos ver el historial de commits que hemos hecho a lo largo del desarrollo podemos usar el comando <code>git log</code>. Este nos muestra el historial junto con los ids de los commits que utilizaremos m\u00e1s tarde. Mi forma favorita de hacerlo es mediante los flags de:</p> <pre><code>git log --oneline --graph\n</code></pre> <p>El cual te los muestra en forma de grafo de las diferentes ramas y el commit te lo muestra en una sola linea.</p>"},{"location":"git/Comandos%20Basicos%20de%20Git/#diferencias-entre-los-commits","title":"Diferencias entre los Commits","text":"<p>El comando <code>git diff</code> es muy \u00fatil, permite ver las diferencias entre distintos estados de un repositorio.</p> <p>Sirve para visualizar diferencias entre distintas cosas, por ejemplo si ejecutas <code>git diff</code> ves la diferencia entre lo que hay en el directorio de trabajo y lo que hay en stage. Tambi\u00e9n sirve para ver la diferencia entre el stage y el \u00faltimo commit <code>git diff --cached</code>, esto puede ser \u00fatil para revisar los cambios antes de commitearlos.</p> <p>Los m\u00e1s \u00fatiles bajo mi opini\u00f3n son:</p> <pre><code>git diff HEAD\n</code></pre> <p>Que muestra las diferencias entre el directorio de trabajo y el \u00faltimo commit. Y tambi\u00e9n es \u00fatil.</p> <pre><code>git diff &lt;commit1&gt; &lt;commit2&gt;\n</code></pre> <p>Este muestra la diferencia entre dos commits. (Tienes que pasar el identificador del commit, <code>git log</code>).</p>"},{"location":"git/Comandos%20Basicos%20de%20Git/#correccion-de-commits","title":"Correcci\u00f3n de Commits","text":"<p>Si estas trabajando en una serie de cambios y haces commit pero te das cuenta que tienes que realizar cambios, siempre puedes alterar el \u00faltimo commit con <code>ammend</code>. Tras enviar a stage el archivo o los archivos que quieres cambiar, ejecutar\u00e1s:</p> <pre><code>git commit --amend\n</code></pre> <p>Esto abrir\u00e1 tu editor de texto predeterminado con el mensaje del commit anterior. Puedes editar el mensaje si lo deseas. Guarda los cambios y cierra el editor.</p> <p>Si solo quieres cambiar el mensaje del commit, ejecuta esto \u00faltimo sin a\u00f1adir ningun archivo a stage.</p> <p>Advertencia: Hacer esto si todav\u00eda no has hecho un <code>push</code>, si estas trabajando en remoto. Si lo haces cuando ya lo has hecho push, es posible que tendras que hacer:</p> <pre><code>git push --force\n</code></pre> <p>Pero ten en cuenta que hacer esto reescribir\u00e1 la historia del repositorio, lo que podr\u00eda causar problemas si otros colaboradores ya han basado su trabajo en el commit anterior.</p>"},{"location":"git/Comandos%20Basicos%20de%20Git/#commits-temporales","title":"Commits Temporales","text":"<p>Git stash es una herramienta \u00fatil en Git que te permite guardar temporalmente cambios que a\u00fan no deseas comprometer o deseas apartar temporalmente del \u00e1rea de trabajo.</p> <p>Es especialmente \u00fatil cuando estas trabajando en una rama y sin hacer un commit quieres cambiarte a otra ya que si realizas un cambio de rama perder\u00e1s todos los cambios realizados en ella.</p> <p>Tras a\u00f1adir los cambios a stage (<code>git add</code>) ejecutas:</p> <pre><code>git stash\n</code></pre> <p>Para volver a aplicar los cambios seleccionados puedes usar:</p> <pre><code>git stash apply\n</code></pre> <p>Esto aplicar\u00e1 el \u00faltimo conjunto de cambios almacenados en el stash. Si tienes m\u00faltiples sets de cambios guardados, puedes aplicar uno en particular especificando el identificador del stash. <code>git stash apply stash@{2}</code> </p> <p>Una vez que ya no necesites los cambios puedes borrarlos</p> <pre><code>git stash drop\n</code></pre> <p>Si tienes varios funciona igual usano el identificador. <code>git stash drop stash@{2}</code>.</p> <p>El yo uso es:</p> <pre><code>git stash pop\n</code></pre> <p>Esto aplicar\u00e1 el \u00faltimo set de cambios almacenados en el stash y luego lo eliminar\u00e1 autom\u00e1ticamente del stash.</p> <p>Puedes ver una lista de todos los sets de cambios almacenados en el stash.</p> <pre><code>git stash list\n</code></pre> <p>A partir de git 2.13 se puede nombrar a los stages (Probablemente tengas ya una versi\u00f3n superior ya que esta sali\u00f3 en 2017, en a\u00f1o el el cual la gente flipaba con el meme del cocinero que echa sal).</p> <pre><code>git stash push -m \"Nombre descriptivo para el stash\"\n</code></pre> <p>Por lo que podras utilizar este nombre como el identificador en los <code>apply</code> y <code>drop</code></p>"},{"location":"git/Commits%20Avanzados%20Git/","title":"Commits Avanzados","text":"<p>Hasta ahora solo hemos hecho commits de archivos completos, pero si has usado IntelliJ o VSCode te habr\u00e1s dado cuenta que puedes commitear ciertos cambios que t\u00fa selecciones de un archivo mientras que otros no los tocas.</p> <p>Esto en terminal se realiza mediante el siguiente comando:</p> <pre><code>git add -p &lt;archivo&gt;\n</code></pre> <p>Esto te mostrar\u00e1 un men\u00fa interactivo en el cual t\u00fa eliges que cambios a\u00f1adir o no a\u00f1adir.</p> <pre><code>diff --git a/archivo.txt b/archivo.txt\nindex 4b9b6c2..30304ea 100644\n--- a/archivo.txt\n+++ b/archivo.txt\n@@ -1,3 +1,5 @@\n Hola\n+Contenido 1\n Contenido en la rama principal\n+Contenido 2\n Esto es un stage\n(1/1) Stage this hunk [y,n,q,a,d,s,e,?]? \n</code></pre> <p>El men\u00fa al principio no parace muy intuitivo, pero lo acaba siendo tras un par de usos adem\u00e1s que si no sabes que hace cada letra, si utilizas <code>?</code> te las explica de forma clara.</p> <p>El resumen rapido es:</p> <ul> <li>y - stage this hunk</li> <li>n - do not stage this hunk</li> <li>q - quit; do not stage this hunk or any of the remaining ones</li> <li>a - stage this hunk and all later hunks in the file</li> <li>d - do not stage this hunk or any of the later hunks in the file</li> <li>s - split the current hunk into smaller hunks</li> <li>e - manually edit the current hunk</li> <li>? - print help</li> </ul>"},{"location":"git/Introduccion%20a%20Git/","title":"Git (Control de Versiones)","text":"<p>Git es un sistema de control de versiones que te ayuda a rastrear cambios en tus archivos y colaborar con otros en proyectos de software. Con Git, puedes realizar un seguimiento de las diferentes versiones de tus archivos, revertir cambios si es necesario y fusionar el trabajo de diferentes personas de manera eficiente. Es especialmente \u00fatil para equipos de desarrollo de software que trabajan en proyectos complejos, ya que proporciona una forma estructurada de gestionar y compartir c\u00f3digo. Con Git, puedes trabajar de forma colaborativa y mantener un historial claro de todos los cambios realizados en tus proyectos.</p>"},{"location":"git/Introduccion%20a%20Git/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para instalar git tienes que ir a su pagina oficial. Descargarte el instalador y ejecutarlo.</p> <p>En el proceso de instalaci\u00f3n, te permitir\u00e1 configurar git. Entre las que destacan la selecci\u00f3n del editor por defecto, por defecto utiliza vim, pero se puede cambiar a VSCode. Tambi\u00e9n esta la del nombre por defecto de la rama principal, si dejamos que Git decida, la nombrar\u00e1 como <code>Master</code>, en este caso aconsejo cambiarla a <code>main</code> que es el nombre est\u00e1ndar que se utiliza actualmente.</p> <p>Una vez instalado, veremos que tendremos instalados varios programas. En windows cabe destacar que tenemos Git CMD y Git Bash, este \u00faltimo es para usarlo como con una terminal de Bash (Linux), en cualquier caso los comandos de Git son exactamente los mismos. Yo los ejecuto desde PowerShell</p> <p>Tambi\u00e9n tenemos instalada Git GUI que es por si no queremos usar la consola pero al trabajar con Git se suele hacer con linea de comandos por lo que no la recomiendo.</p> <p>Para comprobar su correcto funcionamiento ejecutaremos</p> <pre><code>git --version\n</code></pre>"},{"location":"git/Introduccion%20a%20Git/#configuracion-basica","title":"Configuraci\u00f3n b\u00e1sica","text":"<p>Puedes configurar Git desde la linea de comandos con <code>git config</code>, si utilizas tambi\u00e9n el p\u00e1rametro <code>--global</code> la diferencia es que mientras que uno hace una configuracion concreta en un repositorio, con gobal se aplican cambios generales por defecto.</p> <p>Para establecer tu nombre y tu email:</p> <pre><code>git config --global user.name \"Tu nombre\"\ngit config --global user.email \"Email@gmail.com\"\n</code></pre> <p>Para cambiar tu editor por defecto puedes utilizar:</p> <pre><code>git config --global core.editor \"code --wait\"\n</code></pre> <p>Esto lo que hace es establecer code (VSCode) como editor por defecto y esperar a que se cierre el editor. Para cualquier otro editor basta con escibirlo tal y como lo abririas por terminal. <code>notepad</code>, <code>notepad++</code>, <code>vim</code>, <code>nvim</code>, <code>atom</code>...</p> <p>Si no has cambiado la configuraci\u00f3n de master a main, recomiendo que lo hagas, desde terminal se puede hacer con:</p> <pre><code>git config --global init.defaultBranch main\n</code></pre> <p>Si quieres abrir el archivo de configuraci\u00f3n y ediralo en el editor que hayas seleccionado, puedes hacerlo con:</p> <pre><code>git config --global -e\n</code></pre>"},{"location":"git/Introduccion%20a%20Git/#ayuda","title":"Ayuda","text":"<p>Al igual que en windows o bash con <code>help</code> o <code>man</code> git tiene un manual para saber que hace cada comando.</p> <pre><code>git help # Ayuda de git general\ngit help COMMAND # Ayuda de un comando especifico\n</code></pre>"},{"location":"git/Merge%20Conflict/","title":"Merge Conflict","text":"<p>Un merge conflict ocurre cuando dos ramas diferentes contienen cambios incompatibles en el mismo archivo, y Git no puede determinar autom\u00e1ticamente c\u00f3mo fusionar esos cambios. En este caso, requiere intervenci\u00f3n manual del usuario para resolver el conflicto, decidiendo qu\u00e9 cambios mantener y c\u00f3mo combinarlos adecuadamente.</p> <p>Para solucionar el conflicto, antes de nada hay que localizarlo, <code>git status</code>. Para corregirlo tendr\u00e1s que editar el archivo que da el conflicto ya que git lo ha escrito esperando a mas informacion. Por ejemplo:</p> <pre><code>Hola\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nContenido en la rama principal\n=======\nContenido en la rama1\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; rama1\n</code></pre> <p>Esto es un conflicto simulado entre dos ramas, una main y otra rama1. En tal caso tendras que borrar las lineas para quedarte con el contenido que quieres, en este caso me quedare con el contenido de la rama main.</p> <pre><code>Hola\nContenido en la rama principal\n</code></pre> <p>Ahora le tenemos que informar a git que se ha solucionado:</p> <pre><code>git add .\ngit merge --continue\n</code></pre> <p>Los editores modernos y clientes de git como Code, IntelliJ o Gitkracken te ayuda a hacer esto de modo visual con una GUI pero esta es la forma que se har\u00eda desde consola.</p>"},{"location":"git/Ramas%20Git/","title":"Ramas en Git","text":"<p>En Git, las ramas son versiones independientes de un proyecto que permiten el desarrollo paralelo de diferentes caracter\u00edsticas o soluciones. Se utilizan para experimentar, aislar cambios, implementar nuevas funcionalidades y mantener versiones estables y de desarrollo separadas. Las ramas facilitan la colaboraci\u00f3n en equipo al proporcionar un entorno flexible para trabajar en diferentes partes del proyecto simult\u00e1neamente.</p> <p>Al trabajar con ramas se utilizan principalmente cuatro comandos <code>git branch</code>, <code>git switch</code>, <code>git checkout</code> y <code>git merge</code>.</p>"},{"location":"git/Ramas%20Git/#creacion-de-ramas","title":"Creaci\u00f3n de Ramas","text":"<p><code>git branch</code> sirve principalmente para la creaci\u00f3n y eliminaci\u00f3n de ramas:</p> <pre><code>git branch # Muestra todas las ramas\ngit branch nueva-rama # Crea una nueva rama (Desde HEAD)\ngit branch nueva-rama &lt;commit&gt; # Crea una nueva rama desde un commit especifico\ngit branch -d rama-a-eliminar # Borra una rama (Lo hace si ya has hecho merge de ella)\n</code></pre> <p>Otros de interesantes:</p> <pre><code>git branch -D &lt;branch&gt; # Borra una rama\ngit branch -m name # Renombra la rama actual\ngit branch -m nombre-antiguo nombre-nuevo # Renombra una rama\ngit branch -a # Lista las ramas remotas\n</code></pre>"},{"location":"git/Ramas%20Git/#moverse-entre-ramas","title":"Moverse entre Ramas","text":"<p>Para moverse entre ramas hay dos formas, con <code>checkout</code> y con <code>switch</code>.</p> <p><code>git switch</code> como su nombre dice es cambiar de una rama a otra (Es una alternativa segura a <code>checkout</code> por lo que se recomienda usar)</p> <pre><code>git switch rama1 # Cambia a rama1 (ya creada)\ngit switch -c rama1 # Crea y cambia a rama1\n</code></pre> <p>Por otro lado, <code>git checkout</code> funciona exactamente igual a <code>git switch</code> pero es m\u00e1s una navaja multiusos ya que como hemos visto anteriormente, se utiliza tambien para desacer cambios y muchas cosas m\u00e1s asique desaconsejo su uso.</p>"},{"location":"git/Ramas%20Git/#combinar-ramas","title":"Combinar Ramas","text":"<p>Cuando quieres combinar ramas se utiliza <code>git merge</code>. Dado el siguiente caso:</p> <p></p> <p>Si nos encontramos en la rama <code>main</code> y ejecutamos</p> <pre><code>git merge feature\n</code></pre> <p>A la rama <code>main</code> se le incorporaran los cambios de la rama <code>feature</code>:</p> <p></p>"},{"location":"git/Repositorios%20Remotos%20Git/","title":"Repositorios Remotos Git","text":"<p>Los repositorios que creamos con <code>git init</code> son repositorios locales en nuestro ordenador, pero para trabajar de manera colaborativa se utilizan repositorios remotos. Plataformas como Github o Gitlab ofrecen estos servicios.</p> <p>La forma de trabajar con ellos no es muy diferente. No nos vamos a centrar en aspectos concretos de cada plataforma (crear repositorios github, autenticarse, tokens...), solo nos vamos a centraren como trabajar sobre ellos.</p> <p>Cuando quies a\u00f1adir un repositorio remoto utilizas:</p> <pre><code>git remote add origin direccion_del_repositorio\n</code></pre> <p>Esto te agrega la direccion al repositorio para trabajar.</p> <p>Si quieres clonar un repositorio para trabajar a el pero no lo tienes en tu m\u00e1quina local:</p> <pre><code>git clone direccion_del_repositorio\n</code></pre>"},{"location":"git/Repositorios%20Remotos%20Git/#trabajando-con-repositorios","title":"Trabajando Con repositorios","text":"<p>Ya teniendo el repositorio en tu m\u00e1quina local si ejecutas <code>git fetch</code> mira si hay cambios del repositorio remoto comparado con tu repositorio local. En el caso de que haya cambios, puedes ejecutar:</p> <pre><code>git pull\n</code></pre> <p>En este momento, puedes empezar a trabajar como en local y hacer los commits necesarios. Una vez ya terminado tienes que llevar los cambios al repositorio remoto:</p> <pre><code>git push origin main\n</code></pre> <p>origin es el nombre del repositorio remoto y main es el nombre de la rama principal o la que quieres usar.</p> <p>Si el repositorio esta vacio tendr\u00e1s que usar:</p> <pre><code>git push -u origin main\n</code></pre> <p>Si estras trabajando de forma colaborativa es posible que se provoque un merge conflict que se da cuando dos cambios sobre lo mismo han pasado y tendr\u00e1s que solucionarlo a mano.</p>"},{"location":"git/Revirtiendo%20Cambios%20Git/","title":"Revirtiendo Cambios","text":"<p>La magia de git es que da la capacidad de desacer cambios que has hecho y volver a una versi\u00f3n del c\u00f3digo anterior en casode cometer alg\u00fan fallo.</p>"},{"location":"git/Revirtiendo%20Cambios%20Git/#desacer-camios-no-commiteados","title":"Desacer Camios no Commiteados","text":"<p>Si trabajas en algo y quieres deshacer los cambios que estabas haciendo al \u00faltimo commit hecho (HEAD) de un archivo completo. Puedes usar el command <code>checkout</code></p> <pre><code>git checkout -- archivo a borrar\n</code></pre> <p>Si quieres hacerlo de todos los archivos:</p> <pre><code>git checkout -- .\n</code></pre> <p>En git se puede hacer las mismas cosas de distinto modo, tabi\u00e9n puedes hacecr <code>git revert HEAD</code></p>"},{"location":"git/Revirtiendo%20Cambios%20Git/#deshacer-cambios-commiteados","title":"Deshacer Cambios Commiteados","text":"<p>Para deshacer cambios ya commiteados posemos usar <code>git revert</code>. Este, crea un nuevo commit que deshace los cambios de un commit espec\u00edfico. No altera la historia de commits existente, en su lugar, agrega un nuevo commit que deshace los cambios del commit seleccionado.</p> <pre><code>git revert &lt;commit&gt;\n</code></pre> <p>Donde le pasas la id del commit que tendr\u00e1s que mirar con <code>git log</code>.</p> <p>Si quieres revertir cambios sabiendo que sno n cambios atras de HEAD puedes hacerlo</p> <pre><code>git revert HEAD\ngit revert HEAD~5 # Revierte al commmit de 5 cambios atras\n</code></pre> <p>Tambi\u00e9s puedes revertir una serie de cambios</p> <pre><code>git revert -n master~5..master~2\n</code></pre>"},{"location":"git/Revirtiendo%20Cambios%20Git/#borrar-cambios-de-forma-permanente","title":"Borrar Cambios de Forma Permanente","text":"<p><code>git reset</code> a diferencia de <code>git revert</code> se utiliza para deshacer cambios, pero puede ser m\u00e1s dr\u00e1stico en su efecto, ya que puede eliminar commits y cambiar la historia de tu repositorio.</p> <p>Este comando tiene tres modos principales:</p> <ul> <li><code>--soft</code>: Con <code>git reset --soft</code>, el repositorio se restablece al commit especificado, pero los cambios del commit seleccionado se mantienen en el \u00e1rea de ensayo (staging area) y en tu directorio de trabajo. Esto significa que puedes rehacer los cambios y volver a confirmarlos si es necesario.</li> </ul> <pre><code>git reset --soft &lt;commit&gt;\n</code></pre> <ul> <li><code>--mixed</code>: Esta es la opci\u00f3n predeterminada si no se especifica ninguna opci\u00f3n con <code>git reset</code>. Con <code>git reset --mixed</code>, el repositorio se restablece al commit especificado y los cambios se eliminan del \u00e1rea de ensayo, pero se conservan en tu directorio de trabajo. Esto te permite revisar los cambios antes de volver a agregarlos al \u00e1rea de ensayo.</li> </ul> <pre><code>git reset --mixed &lt;commit&gt;\n</code></pre> <ul> <li><code>--hard</code>: Con <code>git reset --hard</code>, el repositorio se restablece al commit especificado y los cambios se eliminan tanto del \u00e1rea de ensayo como del directorio de trabajo. Esta opci\u00f3n es m\u00e1s dr\u00e1stica y elimina los cambios de forma permanente, as\u00ed que \u00fasala con precauci\u00f3n, ya que no hay forma de recuperar los cambios una vez aplicado este comando.</li> </ul> <pre><code>git reset --hard &lt;commit&gt;\n</code></pre>"}]}